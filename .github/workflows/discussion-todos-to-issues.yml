name: Discussion TODOs to Issues (with Sub Issues Link)

on:
  discussion:
    types: [created]

permissions:
  issues: write
  discussions: read

jobs:
  discussion_todos_to_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Create issues from TODOs in meeting minutes (with sub issues)
        uses: actions/github-script@v7
        with:
          script: |
            const discussion = context.payload.discussion;
            if (discussion.category.name !== "회의록") {
              console.log("카테고리가 회의록이 아니므로 종료합니다.");
              return;
            }
            const lines = discussion.body.split('\n');
            let inTodoSection = false;
            let currentAssignee = null;
            let parentIssueData = null; // 부모 이슈의 전체 데이터 저장

            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];

              if (/^#+\s*TODO/i.test(line.trim())) {
                inTodoSection = true;
                currentAssignee = null;
                parentIssueData = null;
                continue;
              }
              if (inTodoSection && /^#+\s*\S+/.test(line.trim()) && !/^#+\s*TODO/i.test(line.trim())) {
                inTodoSection = false;
                currentAssignee = null;
                parentIssueData = null;
                continue;
              }
              if (!inTodoSection) continue;

              const assigneeMatch = line.trim().match(/^@(\w+)/);
              if (assigneeMatch) {
                currentAssignee = assigneeMatch[1];
                parentIssueData = null;
                continue;
              }

              const todoMatch = line.match(/^(\s*)- \[ \] (.+)/);
              if (todoMatch && currentAssignee) {
                const indent = todoMatch[1].length;
                const todoText = todoMatch[2].trim();

                if (indent === 0) {
                  // 부모 이슈 생성
                  const issue = await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: todoText,
                    body: `이 이슈는 회의록 Discussion에서 자동 생성되었습니다.\n\n[원본 Discussion 링크](${discussion.html_url})`,
                    assignees: [currentAssignee],
                    labels: ["회의록-TODO"]
                  });
                  parentIssueData = issue.data; // 부모 이슈 데이터 전체 저장
                } else if (indent >= 2 && parentIssueData) {
                  // 1. sub issue 생성
                  const subIssue = await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: todoText,
                    body: `부모 이슈: #${parentIssueData.number}\n\n이 이슈는 회의록 Discussion에서 자동 생성되었습니다.\n\n[원본 Discussion 링크](${discussion.html_url})`,
                    assignees: [currentAssignee],
                    labels: ["회의록-TODO", "sub-issue"]
                  });

                  // 2. 부모 이슈 본문에 sub-issue를 체크박스로 추가
                  const newBody = parentIssueData.body + `\n- [ ] #${subIssue.data.number}`;
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parentIssueData.number,
                    body: newBody
                  });
                  // 부모 이슈의 최신 본문으로 업데이트
                  parentIssueData.body = newBody;
                }
              }
            }
