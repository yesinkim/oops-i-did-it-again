name: Issue Status to Discussion TODO Sync

on:
  issues:
    types: [closed, reopened]

permissions:
  issues: read
  discussions: write

jobs:
  check_discussion_todo:
    runs-on: ubuntu-latest
    steps:
      - name: Check TODO in Discussion
        uses: actions/github-script@v7
        with:
          script: |
            // 이벤트 타입 확인
            const action = context.payload.action;
            const isClosed = action === 'closed';
            const isReopened = action === 'reopened';
            
            if (!isClosed && !isReopened) {
              console.log("이벤트 타입이 closed 또는 reopened가 아니므로 종료합니다.");
              return;
            }

            // 1. 이슈 본문에서 Discussion URL, 체크박스 텍스트 추출
            const issueBody = context.payload.issue.body;
            const discussionUrlMatch = issueBody.match(/\(https:\/\/github\.com\/.+\/discussions\/(\d+)\)/);
            if (!discussionUrlMatch) {
              console.log("Discussion 링크를 찾을 수 없습니다.");
              return;
            }
            const discussionNumber = discussionUrlMatch[1];
            const todoText = context.payload.issue.title;

            // 2. GraphQL로 Discussion 본문 읽기
            const query = `
              query {
                repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                  discussion(number: ${discussionNumber}) {
                    id
                    body
                  }
                }
              }
            `;
            const result = await github.graphql(query);
            const discussion = result.repository.discussion;
            if (!discussion) {
              console.log("Discussion을 찾을 수 없습니다.");
              return;
            }
            let newBody = discussion.body;

            // 3. 이벤트에 따라 체크박스 상태 변경
            if (isClosed) {
              // 이슈가 닫힐 때: [ ] → [x]로 변경
              const regex = new RegExp(`- \\[ \\] ${todoText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}`);
              newBody = newBody.replace(regex, `- [x] ${todoText}`);
              console.log(`이슈가 닫혀서 Discussion TODO를 체크합니다: ${todoText}`);
            } else if (isReopened) {
              // 이슈가 재오픈될 때: [x] → [ ]로 변경
              const regex = new RegExp(`- \\[x\\] ${todoText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}`);
              newBody = newBody.replace(regex, `- [ ] ${todoText}`);
              console.log(`이슈가 재오픈되어서 Discussion TODO 체크를 해제합니다: ${todoText}`);
            }

            // 4. GraphQL로 Discussion 본문 수정
            const mutation = `
              mutation {
                updateDiscussion(input: {discussionId: "${discussion.id}", body: """${newBody}"""}) {
                  discussion {
                    id
                  }
                }
              }
            `;
            await github.graphql(mutation);
            console.log("Discussion 본문 업데이트 완료");
